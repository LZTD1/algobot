// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/ai.proto

package aiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ai_GetSuggest_FullMethodName     = "/pkg.Ai/GetSuggest"
	Ai_ClearHistory_FullMethodName   = "/pkg.Ai/ClearHistory"
	Ai_GetInformation_FullMethodName = "/pkg.Ai/GetInformation"
	Ai_ChangeModel_FullMethodName    = "/pkg.Ai/ChangeModel"
	Ai_GenerateImage_FullMethodName  = "/pkg.Ai/GenerateImage"
)

// AiClient is the client API for Ai service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiClient interface {
	GetSuggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	ClearHistory(ctx context.Context, in *ClearHistoryRequest, opts ...grpc.CallOption) (*ClearHistoryResponse, error)
	GetInformation(ctx context.Context, in *GetInformationRequest, opts ...grpc.CallOption) (*GetInformationResponse, error)
	ChangeModel(ctx context.Context, in *ChangeModelRequest, opts ...grpc.CallOption) (*ChangeModelResponse, error)
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
}

type aiClient struct {
	cc grpc.ClientConnInterface
}

func NewAiClient(cc grpc.ClientConnInterface) AiClient {
	return &aiClient{cc}
}

func (c *aiClient) GetSuggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, Ai_GetSuggest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) ClearHistory(ctx context.Context, in *ClearHistoryRequest, opts ...grpc.CallOption) (*ClearHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearHistoryResponse)
	err := c.cc.Invoke(ctx, Ai_ClearHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GetInformation(ctx context.Context, in *GetInformationRequest, opts ...grpc.CallOption) (*GetInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInformationResponse)
	err := c.cc.Invoke(ctx, Ai_GetInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) ChangeModel(ctx context.Context, in *ChangeModelRequest, opts ...grpc.CallOption) (*ChangeModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeModelResponse)
	err := c.cc.Invoke(ctx, Ai_ChangeModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, Ai_GenerateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiServer is the server API for Ai service.
// All implementations must embed UnimplementedAiServer
// for forward compatibility.
type AiServer interface {
	GetSuggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	ClearHistory(context.Context, *ClearHistoryRequest) (*ClearHistoryResponse, error)
	GetInformation(context.Context, *GetInformationRequest) (*GetInformationResponse, error)
	ChangeModel(context.Context, *ChangeModelRequest) (*ChangeModelResponse, error)
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	mustEmbedUnimplementedAiServer()
}

// UnimplementedAiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAiServer struct{}

func (UnimplementedAiServer) GetSuggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggest not implemented")
}
func (UnimplementedAiServer) ClearHistory(context.Context, *ClearHistoryRequest) (*ClearHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearHistory not implemented")
}
func (UnimplementedAiServer) GetInformation(context.Context, *GetInformationRequest) (*GetInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInformation not implemented")
}
func (UnimplementedAiServer) ChangeModel(context.Context, *ChangeModelRequest) (*ChangeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModel not implemented")
}
func (UnimplementedAiServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedAiServer) mustEmbedUnimplementedAiServer() {}
func (UnimplementedAiServer) testEmbeddedByValue()            {}

// UnsafeAiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiServer will
// result in compilation errors.
type UnsafeAiServer interface {
	mustEmbedUnimplementedAiServer()
}

func RegisterAiServer(s grpc.ServiceRegistrar, srv AiServer) {
	// If the following call pancis, it indicates UnimplementedAiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ai_ServiceDesc, srv)
}

func _Ai_GetSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetSuggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetSuggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_ClearHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).ClearHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_ClearHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).ClearHistory(ctx, req.(*ClearHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GetInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetInformation(ctx, req.(*GetInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_ChangeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).ChangeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_ChangeModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).ChangeModel(ctx, req.(*ChangeModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GenerateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ai_ServiceDesc is the grpc.ServiceDesc for Ai service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ai_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.Ai",
	HandlerType: (*AiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggest",
			Handler:    _Ai_GetSuggest_Handler,
		},
		{
			MethodName: "ClearHistory",
			Handler:    _Ai_ClearHistory_Handler,
		},
		{
			MethodName: "GetInformation",
			Handler:    _Ai_GetInformation_Handler,
		},
		{
			MethodName: "ChangeModel",
			Handler:    _Ai_ChangeModel_Handler,
		},
		{
			MethodName: "GenerateImage",
			Handler:    _Ai_GenerateImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ai.proto",
}
