// Code generated by MockGen. DO NOT EDIT.
// Source: algobot/internal/telegram/handlers/callback (interfaces: GroupRefresher)
//
// Generated by this command:
//
//	mockgen -destination=./groupRefresher.go -package=mocks algobot/internal/telegram/handlers/callback GroupRefresher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGroupRefresher is a mock of GroupRefresher interface.
type MockGroupRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRefresherMockRecorder
	isgomock struct{}
}

// MockGroupRefresherMockRecorder is the mock recorder for MockGroupRefresher.
type MockGroupRefresherMockRecorder struct {
	mock *MockGroupRefresher
}

// NewMockGroupRefresher creates a new mock instance.
func NewMockGroupRefresher(ctrl *gomock.Controller) *MockGroupRefresher {
	mock := &MockGroupRefresher{ctrl: ctrl}
	mock.recorder = &MockGroupRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRefresher) EXPECT() *MockGroupRefresherMockRecorder {
	return m.recorder
}

// RefreshGroup mocks base method.
func (m *MockGroupRefresher) RefreshGroup(uid int64, traceID any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshGroup", uid, traceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshGroup indicates an expected call of RefreshGroup.
func (mr *MockGroupRefresherMockRecorder) RefreshGroup(uid, traceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshGroup", reflect.TypeOf((*MockGroupRefresher)(nil).RefreshGroup), uid, traceID)
}
